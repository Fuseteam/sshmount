#!/bin/bash
prefix="@prefix@/lib"
if [ "${prefix:0:1}" = "@" ]; then prefix=".";fi
source "${prefix}"/sshmountlib

if [ ! -d "$condir" ]; then
    mkdir "$HOME"/.ssh
fi

if [ ! -f "$confile" ]; then
        cat fsconfig > "$condir"/fsconfig
fi

flags=();
fwdflag='';
sshflag='';
sshopts='';
reqArg=false;
while getopts 'fsCu:p:o:F:S:d1hiwlV' flag; do
    case ${flag} in
       u) LD=$(fetchHostAttribute "$2" '---' 'LocalDirectory');
           [[ "$LD" = "1" ]] && { LD=$(fetchHostAttribute "$2" 'Host' 'LocalDirectory'); }
           [ -n "$LD" ] && { fusermount -"$flag" "$LD" && rmdir "$LD" || echo "$LD" is not mounted; }\
               || echo host missing LocalDirectory attribute in "$confile"
           exit;;
       w) fwdflag='true';;
       S) sshflag='true';sshopts=${OPTARG};;
       F|p|o) flags+=(-$flag "${OPTARG}");reqArg=true;;
       C|f|1|s|d) flags+=(-"$flag");;
       V) sshfs --version;exit;;
       l) listMounts;exit;;
       *) print_usage;
           exit;;
    esac
done
if [[ -z "${flags[*]}" && -z "$fwdflag" && -z "$sshflag" ]]; then
    Host=$1
elif [[ -z "${reqArg}" ]]; then
    Host=${BASH_ARGV[0]};
else
    echo "missing argument";exit;
fi

if [ -z "$Host" ]; then
    print_usage;
    exit
fi
LD=$(fetchHostAttribute "$Host" '---' 'LocalDirectory');
RD=$(fetchHostAttribute "$Host" '---' 'RemoteDirectory');
PFwd=$(fetchHostAttribute "$Host" "---" "PortForwarding");
LFwd=$(fetchHostAttribute "$Host" "---" "LocalForward" "-L");
RFwd=$(fetchHostAttribute "$Host" "---" "RemoteForward" "-R");
[[ "$LD" = "1" ]] && { LD=$(fetchHostAttribute "$Host" 'Host' 'LocalDirectory'); }
[[ "$RD" = "1" ]] && { RD=$(fetchHostAttribute "$Host" 'Host' 'RemoteDirectory'); }
if [[ -n "$PFwd" && "$PFwd" = "yes" && -z "$sshopts" ]]; then
    { sshflag='true'; sshopts="-oClearAllForwardings=no"; }
elif [[ -n "$PFwd" && "$PFwd" = "yes" && -n "$sshopts" ]]; then
    { sshflag='true'; sshopts="-oClearAllForwardings=no $sshopts"; }
fi
[[ -n "$LFwd" && "$LFwd" != "2" ]] && { sshopts="$sshopts$LFwd"; } #sshopts="$sshopts -L$LFwd"; }
[[ -n "$RFwd" && "$RFwd" != "2" ]] && { sshopts="$sshopts$RFwd"; }
#############################################################################################
#   up to 2 Directories can be assigned to a single host by defining it in the following form 
#
#   ---
#        LocalDirectory /path/to/local/directory
#        RemoteDirectory /path/to/remote/directory
#   Host host
#        LocalDirectory /path/to/local/directory2
#        RemoteDirectory /path/to/remote/directory2
#   ---
#
#   for assigning a single directory 2 forms are supported
#
#   form #1
#
#   ---
#        LocalDirectory /path/to/local/directory
#        RemoteDirectory /path/to/remote/directory
#   Host host
#   ---
#
#   form #2
#
#   ---
#   Host host
#        LocalDirectory /path/to/local/directory2
#        RemoteDirectory /path/to/remote/directory2
#   ---
#
#   all host must be separate by a row of '---' at the moment
#############################################################################################

[[ "$LD" = "2" ]] && { echo host $host missing LocalDirectory attribute in "$confile"; exit 2; }
[[ "$RD" = "2" ]] && { echo host $host missing RemoteDirectory attribute in "$confile"; exit 2; }
[ ! -d "$LD" ] && mkdir "$LD";
[ ! -z "$fwdflag" ] && fwd=",ssh_command=ssh -oClearAllForwardings=no";
[ ! -z "$sshflag" ] && ssh=",ssh_command=ssh $sshopts";
set -x; sshfs -o reconnect,ServerAliveInterval=15,sshfs_sync,sync_readdir"$fwd""$ssh" "${flags[@]}" "$LD" "$Host":"$RD";
