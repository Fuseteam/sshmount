#!/bin/bash
condir="$HOME/.ssh"
confile="$condir/fsconfig"

function fetchHostAttribute(){
    numhosts=$(sed -n "/$1$/,/^$2/p" "$confile"|awk "/$3/{print \$2}"|wc -l);
    [[ "$numhosts" -gt "1" && -z $4 ]] && echo "1" && exit 1;
    [[ -z "$4" ]] && attrhost=$(sed -n "/$1$/,/^$2/p" "$confile"|awk "/$3/{print \$2}");
    [[ -n "$4" ]] && attrhost=$(sed -n "/$1$/,/^$2/p" "$confile"|awk "BEGIN{OFS = \":\";}/$3/{print \$2,\$3}");
    [[ -z "$attrhost" ]] && echo "2" && exit 2;
    echo "$attrhost"
}

function fetchAllPorts(){
    Fwd=$(fetchHostAttribute "$1" "$2" "$3" "$4");
    [[ "$Fwd" = "2" ]] && { echo $Fwd;exit; }
    readarray -t ports < <(echo $Fwd);
    echo "$4 "${ports// / $4 };
}

if [ ! -d "$condir" ]; then
    mkdir "$HOME"/.ssh
fi

if [ ! -f "$confile" ]; then
        cat fsconfig > "$condir"/fsconfig
fi

function print_usage(){
echo 'usage: sshmount [options] [user@]host

sshmount makes use of sshfs to mount folders over ssh and of fusermount to unmount the folders
[options] should always to be specified before [user]@host

fusermount options:

[unmount]
    -u HOST                 unmount and delete the mountpoint

sshfs options:';
sshfs --help;
}

flags=();
fwdflag='';
sshflag='';
sshopts='';
while getopts 'fsCu:p:o:FS:d1hV' flag; do
    case ${flag} in
       u) LD=$(fetchHostAttribute "$2" '---' 'LocalDirectory');
           [[ "$LD" = "1" ]] && { LD=$(fetchHostAttribute "$2" 'Host' 'LocalDirectory'); }
           [ -n "$LD" ] && { fusermount -"$flag" "$LD" && rmdir "$LD" || echo "$LD" is not mounted; }\
               || echo host missing LocalDirectory attribute in "$confile"
           exit;;
       F) fwdflag='true';;
       S) sshflag='true';sshopts=${OPTARG};;
       p|o) flags+=(-$flag "${OPTARG}");;
       C|f|1|s|d) flags+=(-"$flag");;
       V) sshfs --version;exit;;
       *) print_usage;
           exit;;
    esac
done
if [[ -z "${flags[*]}" && -z "$fwdflag" && -z "$sshflag" ]]; then
    Host=$1
else
    Host=${BASH_ARGV[0]}
fi

if [ -z "$Host" ]; then
    print_usage;
    exit
fi
LD=$(fetchHostAttribute "$Host" '---' 'LocalDirectory');
RD=$(fetchHostAttribute "$Host" '---' 'RemoteDirectory');
PFwd=$(fetchHostAttribute "$Host" "---" "PortForwarding");
LFwd=$(fetchAllPorts "$Host" "---" "LocalForward" "-L");
RFwd=$(fetchAllPorts "$Host" "---" "RemoteForward" "-R");
[[ "$LD" = "1" ]] && { LD=$(fetchHostAttribute "$Host" 'Host' 'LocalDirectory'); }
[[ "$RD" = "1" ]] && { RD=$(fetchHostAttribute "$Host" 'Host' 'RemoteDirectory'); }
[[ -n "$PFwd" && "$PFwd" = "yes" && -z "$sshopts" ]] && { sshflag='true'; sshopts="-oClearAllForwardings=no"; }
[[ -n "$PFwd" && "$PFwd" = "yes" && -n "$sshopts" ]] && { sshflag='true'; sshopts="-oClearAllForwardings=no $sshopts"; }
[[ -n "$LFwd" && "$LFwd" != "2" ]] && {  sshopts="$sshopts $LFwd"; } #sshopts="$sshopts -L$LFwd"; }
[[ -n "$RFwd" && "$RFwd" != "2" ]] && { sshopts="$sshopts $RFwd"; }
#################################################################################
#   to mount by localdirectory
#   it should then be of the form
#
#   ---
#        LocalDirectory /path/to/local/directory
#        RemoteDirectory /path/to/remote/directory
#   Host host
#################################################################################
 tsoH=$(fetchHostAttribute "$Host" "Host" "Host");
[[ -z "$tsoH" || "$tsoH" = 2 ]] && { echo host "$Host" not defined in "$confile"; exit 2; }
[[ "$tsoH" = "1" ]] && {  tsoH=$(fetchHostAttribute "$Host" "---" "Host"); }
[[ "$tsoH" != "1" && -n "$tsoH" ]] && Host="$tsoH";

[[ "$LD" = "1" || "$tsoH" = "1" || "$RD" = "1" ]] && { echo no unique match! check in the "$confile" that "$Host" is only used once;exit 1; }

[[ "$LD" = "2" ]] && { echo host $host missing LocalDirectory attribute in "$confile"; exit 2; }
[[ "$RD" = "2" ]] && { echo host $host missing RemoteDirectory attribute in "$confile"; exit 2; }
[ ! -d "$LD" ] && mkdir "$LD";
[ ! -z "$fwdflag" ] && fwd=",ssh_command=ssh -oClearAllForwardings=no";
[ ! -z "$sshflag" ] && ssh=",ssh_command=ssh $sshopts";
set -x; sshfs -o reconnect,ServerAliveInterval=15,sshfs_sync,sync_readdir"$fwd""$ssh" "${flags[@]}" "$LD" "$Host":"$RD";
