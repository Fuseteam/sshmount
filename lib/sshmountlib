#!/bin/bash
condir="$HOME/.ssh"
confile="$condir/fsconfig"

function listMounts(){
readarray -t mntpnts < <(awk '/LocalDirectory/{print $2}' "${confile}");
for mntpnt in "${mntpnts[@]}"
do
    awk "/${mntpnt//\//\\/}/{print \$2}" /etc/mtab
done;
}

function getLocalDirs(){
   awk '/Host/{print $2}' "${confile}"
   readarray -t LocalDirs < <(awk '/LocalDirectory/{print $2}' "${confile}")
   for LocalDir in "${LocalDirs[@]}"
   do
       basename "$LocalDir";
   done;
}

function getMountedDirs(){
    readarray -t mounts < <(listMounts);
    for mount in "${mounts[@]}"
    do
        basename "$mount";
    done;
}

function fetchHost(){
    dir=$(sed -n "/$1$/,/^---/p" "$confile"|grep Host);
    [[ "$dir" ]] && echo "$1" && exit 0;
    numattr=$(grep -1 "$1" "$confile"|awk /Host/|wc -l);
    if [[ "$numattr" -lt "1" ]]; then attr=$(fetchHostAttribute "$1" 'Host' 'Host');
    else attr=$(grep -1 "$1" "$confile"|awk '/Host/{print $2}')
    fi
    echo "$attr";
}

function fetchHostAttribute(){
    numhosts=$(sed -n "/$1$/,/^$2/p" "$confile"|grep -c "\-\-\-");
    [[ "$numhosts" -gt "1" && -z $4 ]] && echo "1" && exit 1;
    numhosts=$(sed -n "/$1$/,/^$2/p" "$confile"|awk "/$3/{print \$2}"|wc -l);
    [[ "$numhosts" = "2" && -z $4 ]] && attrhost=$(sed -n "/$1$/,/^$2/p" "$confile"|awk "/$3/{print \$2}"|head -1) && echo "$attrhost" && exit 0;
    [[ -z "$4" ]] && attrhost=$(sed -n "/$1$/,/^$2/p" "$confile"|awk "/$3/{print \$2}");
    [[ -n "$4" ]] && attrhost=$(sed -n "/$1$/,/^$2/p" "$confile"|awk "/$3/{printf \"%s %s:%s\",\" $4\",\$2,\$3;}");
    [[ -z "$attrhost" ]] && echo "2" && exit 2;
    echo "$attrhost"
}

unmount() {
    LD=$(fetchHostAttribute "$2" '---' 'LocalDirectory');
    RMD=$(fetchHostAttribute "$2" '---' 'UnmountRmdir');
    [[ "$LD" = "1" ]] && { LD=$(fetchHostAttribute "$2" 'Host' 'LocalDirectory'); }
    readarray -t mounts < <(listMounts);
    for mount in "${mounts[@]}"
    do
        [ "$mount" = "$LD" ] && {
            set -x
            fusermount -"$1" "$LD" && [[ "$RMD" != *[Nn]* ]] && rmdir "$LD";
            set +x
            ULD='true'
            break;
        }
    done;
    [ -z "$ULD" ] && echo "$LD" is not mounted
}

checkMounts() {
    readarray -t mounts < <(listMounts);
    for mount in "${mounts[@]}"
    do
        [ "$mount" = "$1" ] && echo $(basename "$1") is already mounted && exit 3;
    done;
}

function print_usage(){
echo 'usage: sshmount [options] [user@]host

sshmount makes use of sshfs to mount folders over ssh and of fusermount to unmount the folders
[options] should always to be specified before [user]@host

fusermount options:

[unmount]
    -u HOST                 unmount and delete the mountpoint
    -r HOST                 remount the mountpoint
    -l                      list all mountpoints
    -w                      enable ssh forwarding
    -S                      pass ssh options

sshfs options:';
sshfs --help;
}

